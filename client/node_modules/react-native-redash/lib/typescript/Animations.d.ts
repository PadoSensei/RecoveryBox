import Animated from "react-native-reanimated";
export interface AnimationState {
    current: number;
}
export interface PhysicsAnimationState extends AnimationState {
    velocity: number;
}
export declare type Animation<State extends AnimationState = AnimationState, PrevState = State> = {
    animation: (animation: State, now: number) => boolean;
    start: (animation: State, value: number, now: number, lastAnimation: PrevState) => void;
} & State;
export declare type AnimationParameter<State extends AnimationState = AnimationState> = Animation<State> | (() => Animation<State>) | number;
export declare const animationParameter: <State extends AnimationState = AnimationState>(animationParam: AnimationParameter<State>) => Animation<State, State>;
export declare const defineAnimation: <S extends AnimationState = AnimationState, Prev extends AnimationState = AnimationState>(factory: () => Pick<Animation<S, Prev>, Exclude<keyof S, keyof S> | Exclude<"animation", keyof S> | Exclude<"start", keyof S>>) => number;
export declare const withPause: (animationParam: AnimationParameter, paused: Animated.SharedValue<boolean>) => number;
export declare const withBouncing: (animationParam: AnimationParameter<PhysicsAnimationState>, lowerBound: number, upperBound: number) => number;
