import { Vector } from "./Vectors";
export declare enum SVGCommand {
    MOVE = 0,
    CURVE = 1,
    CLOSE = 2
}
interface Move extends Vector {
    type: SVGCommand.MOVE;
}
interface Curve {
    type: SVGCommand.CURVE;
    from: Vector;
    to: Vector;
    c1: Vector;
    c2: Vector;
}
interface Close {
    type: SVGCommand.CLOSE;
}
export declare type Segment = Close | Curve | Move;
export declare type Path = Segment[];
export declare const exhaustiveCheck: (command: never) => never;
export declare const serialize: (path: Path) => string;
export declare const parse: (d: string) => Path;
export declare const interpolatePath: (value: number, inputRange: number[], outputRange: Path[]) => string;
export declare const mixPath: (value: number, p1: Path, p2: Path) => string;
export declare const move: (x: number, y: number) => {
    type: SVGCommand.MOVE;
    x: number;
    y: number;
};
export declare const curve: (c: Omit<Curve, "type">) => {
    type: SVGCommand.CURVE;
    c1: Vector<number>;
    c2: Vector<number>;
    to: Vector<number>;
    from: Vector<number>;
};
export declare const close: () => {
    type: SVGCommand.CLOSE;
};
export declare const getYForX: (path: Path, x: number) => number;
export {};
