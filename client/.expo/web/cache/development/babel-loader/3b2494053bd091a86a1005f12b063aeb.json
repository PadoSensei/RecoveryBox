{"ast":null,"code":"var _jsxFileName = \"/Users/davidhardy/Coding/CodeworksCourse/Senior/Solo Project/RecoveryBox/client/components/MoodVisuals.js\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { MediumAppText, BoldAppText } from \"../styles/text\";\nimport Divider from \"./Divider\";\nimport { VictoryArea, VictoryChart, VictoryAxis } from 'victory-native';\nimport _ from 'lodash';\nimport { DateTime } from 'luxon';\nimport { Defs, Ellipse, LinearGradient, Stop } from \"react-native-svg\";\n\nfunction MoodVisuals() {\n  var historicalData = useSelector(function (state) {\n    return state.historicalData;\n  });\n\n  var moodsData = _.map(historicalData, function (el) {\n    return el.moods;\n  });\n\n  function create(array) {\n    var obj = {};\n\n    for (var _iterator = _createForOfIteratorHelperLoose(array), _step; !(_step = _iterator()).done;) {\n      var i = _step.value;\n\n      for (var _iterator2 = _createForOfIteratorHelperLoose(i), _step2; !(_step2 = _iterator2()).done;) {\n        var j = _step2.value;\n\n        if (Object.keys(obj).includes(j)) {\n          obj[j] = obj[j] + 1;\n        } else {\n          obj[j] = 0;\n        }\n      }\n    }\n\n    return obj;\n  }\n\n  var ok = {\n    \"bored\": 0,\n    \"down\": 0,\n    \"elated\": 0,\n    \"happy\": 0,\n    \"joyful\": 0,\n    \"sad\": 0,\n    \"stressed\": 0,\n    \"tired\": 0\n  };\n  var obj = create(moodsData);\n  ok.bored = ok.bored + 1;\n  console.log(Object.keys(ok));\n  console.log(obj);\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, \"MoodVissuals\"));\n}\n\nvar styles = StyleSheet.create({\n  container: {}\n});\nexport default MoodVisuals;","map":{"version":3,"sources":["/Users/davidhardy/Coding/CodeworksCourse/Senior/Solo Project/RecoveryBox/client/components/MoodVisuals.js"],"names":["React","useDispatch","useSelector","MediumAppText","BoldAppText","Divider","VictoryArea","VictoryChart","VictoryAxis","_","DateTime","Defs","Ellipse","LinearGradient","Stop","MoodVisuals","historicalData","state","moodsData","map","el","moods","create","array","obj","i","j","Object","keys","includes","ok","bored","console","log","styles","container","StyleSheet"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;AAEA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,SAASC,aAAT,EAAwBC,WAAxB;AACA,OAAOC,OAAP;AACA,SAASC,WAAT,EAAsBC,YAAtB,EAAoCC,WAApC,QAAuD,gBAAvD;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAAQC,IAAR,EAAcC,OAAd,EAAuBC,cAAvB,EAAuCC,IAAvC,QAAmD,kBAAnD;;AAGA,SAASC,WAAT,GAAwB;AAEtB,MAAMC,cAAc,GAAGd,WAAW,CAAC,UAACe,KAAD;AAAA,WAAWA,KAAK,CAACD,cAAjB;AAAA,GAAD,CAAlC;;AACA,MAAME,SAAS,GAAGT,CAAC,CAACU,GAAF,CAAMH,cAAN,EAAsB,UAAAI,EAAE;AAAA,WAAIA,EAAE,CAACC,KAAP;AAAA,GAAxB,CAAlB;;AAEA,WAASC,MAAT,CAAiBC,KAAjB,EAAwB;AACtB,QAAIC,GAAG,GAAG,EAAV;;AACA,yDAAcD,KAAd,wCAAqB;AAAA,UAAZE,CAAY;;AACnB,4DAAcA,CAAd,2CAAiB;AAAA,YAARC,CAAQ;;AACf,YAAIC,MAAM,CAACC,IAAP,CAAYJ,GAAZ,EAAiBK,QAAjB,CAA0BH,CAA1B,CAAJ,EAAkC;AAChCF,UAAAA,GAAG,CAACE,CAAD,CAAH,GAASF,GAAG,CAACE,CAAD,CAAH,GAAO,CAAhB;AACD,SAFD,MAEO;AACLF,UAAAA,GAAG,CAACE,CAAD,CAAH,GAAQ,CAAR;AACD;AACF;AACF;;AACD,WAAOF,GAAP;AACD;;AAED,MAAMM,EAAE,GAAE;AACR,aAAS,CADD;AAER,YAAQ,CAFA;AAGR,cAAU,CAHF;AAIR,aAAS,CAJD;AAKR,cAAU,CALF;AAMR,WAAO,CANC;AAOR,gBAAY,CAPJ;AAQR,aAAS;AARD,GAAV;AAUA,MAAMN,GAAG,GAAGF,MAAM,CAACJ,SAAD,CAAlB;AACAY,EAAAA,EAAE,CAACC,KAAH,GAAWD,EAAE,CAACC,KAAH,GAAS,CAApB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYN,MAAM,CAACC,IAAP,CAAYE,EAAZ,CAAZ;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYT,GAAZ;AAEA,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEU,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,CADF;AAKD;;AAED,IAAMD,MAAM,GAAGE,UAAU,CAACd,MAAX,CAAkB;AAC/Ba,EAAAA,SAAS,EAAE;AADoB,CAAlB,CAAf;AAOA,eAAepB,WAAf","sourcesContent":["import React from 'react';\nimport { StyleSheet, View, Text, Image } from 'react-native';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport { MediumAppText, BoldAppText } from '../styles/text'\nimport Divider from './Divider'\nimport { VictoryArea, VictoryChart, VictoryAxis } from 'victory-native';\nimport _ from 'lodash';\nimport { DateTime } from 'luxon'\nimport {Defs, Ellipse, LinearGradient, Stop } from \"react-native-svg\";\n\n\nfunction MoodVisuals () {\n\n  const historicalData = useSelector((state) => state.historicalData);\n  const moodsData = _.map(historicalData, el => el.moods) \n  \n  function create (array) {\n    let obj = {}\n    for (let i of array) {\n      for (let j of i) {\n        if (Object.keys(obj).includes(j)) {\n          obj[j] = obj[j]+1\n        } else {\n          obj[j]= 0\n        }\n      }\n    }\n    return obj\n  }\n\n  const ok= {\n    \"bored\": 0,\n    \"down\": 0,\n    \"elated\": 0,\n    \"happy\": 0,\n    \"joyful\": 0,\n    \"sad\": 0,\n    \"stressed\": 0,\n    \"tired\": 0,\n  }\n  const obj = create(moodsData)\n  ok.bored = ok.bored+1\n  console.log(Object.keys(ok))\n  console.log(obj)\n\n  return (\n    <View style={styles.container}>\n      <Text>MoodVissuals</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n  },\n});\n\n\n\nexport default MoodVisuals;"]},"metadata":{},"sourceType":"module"}