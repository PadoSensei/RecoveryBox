{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/davidhardy/Coding/CodeworksCourse/Senior/Solo Project/RecoveryBox/client/components/Feeling.js\";\nimport React, { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { BoldAppText, MediumAppText } from \"../styles/text\";\nimport Divider from \"../components/Divider\";\nimport Slider from '@react-native-community/slider';\nimport colors from \"../styles/colors\";\n\nfunction Feeling() {\n  var dispatch = useDispatch();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      sliderValue = _useState2[0],\n      setSliderValue = _useState2[1];\n\n  var sliderCompletionValue = useSelector(function (state) {\n    return state.dailyInfo.feeling;\n  });\n\n  function handleSliderCompletion(arg) {\n    dispatch({\n      type: \"UPDATE_FEELING\",\n      payload: arg\n    });\n  }\n\n  function handleSliderTouch(value) {\n    if (value < 4) {\n      return React.createElement(React.Fragment, null, React.createElement(Image, {\n        style: styles.icon,\n        source: require(\"../assets/sad.png\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 16\n        }\n      }), React.createElement(Image, {\n        style: styles.icon,\n        source: require(\"../assets/neutral.png\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 82\n        }\n      }), React.createElement(Image, {\n        style: styles.icon,\n        source: require(\"../assets/happy.png\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 152\n        }\n      }));\n    } else if (value < 7) {\n      return React.createElement(Image, {\n        style: styles.icon,\n        source: require(\"../assets/neutral.png\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 14\n        }\n      });\n    } else {\n      return React.createElement(Image, {\n        style: styles.icon,\n        source: require(\"../assets/happy.png\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 14\n        }\n      });\n    }\n  }\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, React.createElement(BoldAppText, {\n    style: {\n      fontSize: 17\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, \"How are you feeling?\")), React.createElement(View, {\n    style: styles.sliderWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: styles.textWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, React.createElement(MediumAppText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 11\n    }\n  }, \"Its been a tough day\")), React.createElement(Slider, {\n    style: {\n      width: 200,\n      height: 40\n    },\n    minimumValue: 0,\n    value: 5,\n    step: 1,\n    maximumValue: 10,\n    onValueChange: function onValueChange(value) {\n      return setSliderValue(value);\n    },\n    onSlidingComplete: function onSlidingComplete(value) {\n      return handleSliderCompletion(value);\n    },\n    minimumTrackTintColor: \"#2F80ED\",\n    maximumTrackTintColor: \"#DBDBDB\",\n    thumbTintColor: colors.orange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }), React.createElement(View, {\n    style: styles.textWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, React.createElement(MediumAppText, {\n    style: {\n      textAlign: 'left'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }\n  }, \"Super awesome\"))), React.createElement(View, {\n    style: styles.iconWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, handleSliderTouch(sliderValue)), React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }));\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexDirection: 'column'\n  },\n  sliderWrapper: {\n    marginTop: 10,\n    flexDirection: 'row'\n  },\n  textWrapper: {\n    width: 60\n  },\n  iconWrapper: {\n    flexDirection: 'row',\n    width: 150,\n    justifyContent: 'space-between',\n    marginTop: -15\n  },\n  icon: {\n    width: 30,\n    height: 30\n  }\n});\nexport default Feeling;","map":{"version":3,"sources":["/Users/davidhardy/Coding/CodeworksCourse/Senior/Solo Project/RecoveryBox/client/components/Feeling.js"],"names":["React","useState","useDispatch","useSelector","BoldAppText","MediumAppText","Divider","Slider","colors","Feeling","dispatch","sliderValue","setSliderValue","sliderCompletionValue","state","dailyInfo","feeling","handleSliderCompletion","arg","type","payload","handleSliderTouch","value","styles","icon","require","container","fontSize","sliderWrapper","textWrapper","width","height","orange","textAlign","iconWrapper","StyleSheet","create","flex","alignItems","justifyContent","flexDirection","marginTop"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { StyleSheet, View, Text, Image } from 'react-native';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport { BoldAppText, MediumAppText } from '../styles/text'\nimport Divider from '../components/Divider'\nimport Slider from '@react-native-community/slider';\nimport colors from '../styles/colors'\n\n\nfunction Feeling () {\n\n  const dispatch = useDispatch();\n  const [sliderValue, setSliderValue] = useState(false)\n  const sliderCompletionValue = useSelector((state) => state.dailyInfo.feeling)\n  function handleSliderCompletion (arg) {\n    dispatch({\n      type: \"UPDATE_FEELING\",\n      payload: arg\n    })\n  }\n\n  function handleSliderTouch (value) {\n    if (value < 4) {\n      return <><Image style={styles.icon} source={require('../assets/sad.png')}/><Image style={styles.icon} source={require('../assets/neutral.png')}/><Image style={styles.icon} source={require('../assets/happy.png')}/></>\n    } else if (value < 7) { \n      return <Image style={styles.icon} source={require('../assets/neutral.png')}/>\n    } else {\n      return <Image style={styles.icon} source={require('../assets/happy.png')}/>\n    }\n  }\n\n  //https://www.skptricks.com/2019/03/add-blinking-animation-on-text-in-react-native-app.html\n\n  return (\n    <View style={styles.container}>\n      <View>\n        <BoldAppText style={{fontSize: 17}}>How are you feeling?</BoldAppText>\n      </View>\n      <View style={styles.sliderWrapper}>\n        <View style={styles.textWrapper}>\n          <MediumAppText>Its been a tough day</MediumAppText>\n        </View>\n        <Slider\n          style={{width: 200, height: 40}}\n          minimumValue={0}\n          value={5}\n          step={1}\n          maximumValue={10}\n          onValueChange={value => setSliderValue(value)}\n          onSlidingComplete={value => handleSliderCompletion(value)}\n          minimumTrackTintColor=\"#2F80ED\"\n          maximumTrackTintColor=\"#DBDBDB\"\n          thumbTintColor={colors.orange}\n        />\n        <View style={styles.textWrapper}>\n          <MediumAppText  style={{textAlign: 'left'}}>Super awesome</MediumAppText>\n        </View>\n      </View>\n      <View style={styles.iconWrapper}>\n        {handleSliderTouch(sliderValue)}\n      </View>\n      <Divider/>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexDirection: 'column',\n  },\n  sliderWrapper: {\n    marginTop: 10,\n    flexDirection: 'row'\n\n  },\n  textWrapper: {\n    width: 60\n  },\n  iconWrapper: {\n    flexDirection: 'row',\n    width: 150,\n    justifyContent: 'space-between',\n    marginTop: -15,\n  },\n  icon: {\n    width: 30,\n    height: 30,\n  }\n});\n\n\n\nexport default Feeling;"]},"metadata":{},"sourceType":"module"}