{"ast":null,"code":"var _jsxFileName = \"/Users/davidhardy/Coding/CodeworksCourse/Senior/Solo Project/RecoveryBox/client/containers/SummaryScreen.js\";\nimport React, { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport MeetingsSummary from \"../components/MeetingsSummary\";\nimport FeelingGraph from \"../components/graphs/FeelingGraph\";\nimport MoodVisuals from \"../components/graphs/MoodVisuals\";\nimport SuggestionsVisuals from \"../components/graphs/SuggestionsVisuals\";\nimport Footer from \"../components/Footer\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Constants from 'expo-constants';\nimport { MediumAppText } from \"../styles/text\";\nimport colors from \"../styles/colors\";\n\nfunction SummaryScreen() {\n  var windowHeight = Dimensions.get('window').height;\n  var statusBarHeight = Constants.statusBarHeight;\n  var fullHeight = windowHeight + statusBarHeight;\n  var dynamicStyle = {\n    height: fullHeight\n  };\n  var chartHeight = {\n    height: fullHeight / 4\n  };\n  var dispatch = useDispatch();\n  var chartTimePeriod = useSelector(function (state) {\n    return state.helper.chartTimePeriod;\n  });\n\n  function clickHandler(timePeriod) {\n    console.log('hello');\n    dispatch({\n      type: 'UPDATE_TIMEPERIOD',\n      timePeriod: timePeriod\n    });\n  }\n\n  return React.createElement(View, {\n    style: [styles.container, dynamicStyle],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, React.createElement(ScrollView, {\n    style: styles.scrollView,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: styles.options,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }\n  }, React.createElement(TouchableHighlight, {\n    onPress: function onPress() {\n      return clickHandler('week');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, React.createElement(MediumAppText, {\n    style: chartTimePeriod === 'week' ? styles.optionsTextSelected : styles.optionsTextUnselected,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }, \"WEEK\"))), React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  }, React.createElement(MediumAppText, {\n    onPress: function onPress() {\n      return clickHandler('month');\n    },\n    style: chartTimePeriod === 'month' ? styles.optionsTextSelected : styles.optionsTextUnselected,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, \"MONTH\")), React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }\n  }, React.createElement(MediumAppText, {\n    onPress: function onPress() {\n      return clickHandler('all-time');\n    },\n    style: chartTimePeriod === 'all-time' ? styles.optionsTextSelected : styles.optionsTextUnselected,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }, \"ALL-TIME\"))), React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: styles.textWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  }, React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 15\n    }\n  }, \"Days in recovery\")), React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, React.createElement(MeetingsSummary, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 15\n    }\n  }))), React.createElement(View, {\n    styles: chartHeight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }, React.createElement(FeelingGraph, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  })), React.createElement(View, {\n    styles: chartHeight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }, React.createElement(MoodVisuals, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  })), React.createElement(View, {\n    styles: chartHeight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }, React.createElement(SuggestionsVisuals, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  })))), React.createElement(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }));\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: colors.platinum,\n    flex: 1,\n    paddingBottom: 55\n  },\n  scrollView: {\n    borderRadius: 5,\n    backgroundColor: 'white',\n    elevation: 1,\n    margin: 10,\n    paddingHorizontal: 10,\n    paddingVertical: 12\n  },\n  options: {\n    flex: 1,\n    flexDirection: 'row',\n    alignSelf: 'flex-end',\n    marginRight: 5\n  },\n  optionsTextSelected: {\n    marginTop: -3,\n    marginRight: 7,\n    borderBottomWidth: 2,\n    borderColor: colors.blue,\n    fontFamily: 'Montserrat_700Bold',\n    color: colors.darkGrayFont,\n    paddingBottom: 2\n  },\n  optionsTextUnselected: {\n    marginTop: -3,\n    marginRight: 7,\n    opacity: 0.5,\n    fontFamily: 'Montserrat_500Medium',\n    paddingBottom: 2\n  },\n  charts: {}\n});\nexport default SummaryScreen;","map":{"version":3,"sources":["/Users/davidhardy/Coding/CodeworksCourse/Senior/Solo Project/RecoveryBox/client/containers/SummaryScreen.js"],"names":["React","useState","useSelector","useDispatch","MeetingsSummary","FeelingGraph","MoodVisuals","SuggestionsVisuals","Footer","Constants","MediumAppText","colors","SummaryScreen","windowHeight","Dimensions","get","height","statusBarHeight","fullHeight","dynamicStyle","chartHeight","dispatch","chartTimePeriod","state","helper","clickHandler","timePeriod","console","log","type","styles","container","scrollView","options","optionsTextSelected","optionsTextUnselected","textWrapper","StyleSheet","create","backgroundColor","platinum","flex","paddingBottom","borderRadius","elevation","margin","paddingHorizontal","paddingVertical","flexDirection","alignSelf","marginRight","marginTop","borderBottomWidth","borderColor","blue","fontFamily","color","darkGrayFont","opacity","charts"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { StyleSheet, View, Text, ScrollView, TouchableOpacity, TouchableHighlight } from 'react-native';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport MeetingsSummary from '../components/MeetingsSummary'\nimport FeelingGraph from '../components/graphs/FeelingGraph'\nimport MoodVisuals from '../components/graphs/MoodVisuals'\nimport SuggestionsVisuals from '../components/graphs/SuggestionsVisuals'\nimport Footer from '../components/Footer'\nimport { Dimensions } from \"react-native\";\nimport Constants from 'expo-constants';\nimport { MediumAppText } from '../styles/text';\nimport colors from '../styles/colors';\n\nfunction SummaryScreen () {\n\n  const windowHeight = Dimensions.get('window').height;\n  const statusBarHeight = Constants.statusBarHeight\n  const fullHeight = windowHeight + statusBarHeight;\n\n  const dynamicStyle = {\n    height: fullHeight,\n    // paddingTop: statusBarHeight,\n  };\n\n  const chartHeight = {\n    height: fullHeight/4,\n  };\n\n  const dispatch = useDispatch();\n  const chartTimePeriod = useSelector((state) => state.helper.chartTimePeriod)\n  \n\n  function clickHandler (timePeriod) {\n    console.log('hello')\n    dispatch({\n      type: 'UPDATE_TIMEPERIOD',\n      timePeriod\n    })\n  }\n\n  //TODO dispatch this to helper reducer so we have access in all the charts\n\n  return (\n    <View style={[styles.container,  dynamicStyle]}>\n      <ScrollView style={styles.scrollView}>\n        <View style={styles.options}>\n          {/* add option to show data for a week, month or alltime */}\n          <View >\n            <TouchableHighlight onPress={()=>clickHandler('week')}>\n            <MediumAppText style={chartTimePeriod === 'week' ? styles.optionsTextSelected : styles.optionsTextUnselected}>WEEK</MediumAppText>\n            </TouchableHighlight>\n          </View>\n          <View>\n            <MediumAppText onPress={()=>clickHandler('month')} style={chartTimePeriod === 'month' ? styles.optionsTextSelected : styles.optionsTextUnselected}>MONTH</MediumAppText>\n          </View>\n          <View >\n            <MediumAppText onPress={()=>clickHandler('all-time')} style={chartTimePeriod === 'all-time' ? styles.optionsTextSelected : styles.optionsTextUnselected}>ALL-TIME</MediumAppText>\n          </View>\n        </View>\n        <View>\n          <View style={styles.textWrapper}>\n            <View>\n              <Text>Days in recovery</Text>\n            </View>\n            <View>\n              <MeetingsSummary />\n            </View>\n          </View>\n          <View styles={chartHeight}>\n            <FeelingGraph />\n          </View>\n          <View styles={chartHeight}>\n            <MoodVisuals />\n          </View>\n          <View styles={chartHeight}>\n            <SuggestionsVisuals/>\n          </View>\n        </View>\n      </ScrollView>\n      <Footer/>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: colors.platinum,\n    flex: 1,\n    paddingBottom: 55,\n  },\n  scrollView: {\n    borderRadius: 5,\n    backgroundColor: 'white',\n    elevation: 1,\n    margin: 10,\n    paddingHorizontal: 10,\n    paddingVertical: 12,\n  },\n  options: {\n    flex: 1,\n    flexDirection: 'row',\n    alignSelf: 'flex-end',\n    marginRight: 5,\n  },\n  optionsTextSelected: {\n    marginTop: -3,\n    marginRight: 7,\n    borderBottomWidth: 2,\n    borderColor: colors.blue,\n    fontFamily: 'Montserrat_700Bold',\n    color: colors.darkGrayFont,\n    paddingBottom: 2,\n  },\n  optionsTextUnselected: {\n    marginTop: -3,\n    marginRight: 7,\n    opacity: 0.5,\n    fontFamily: 'Montserrat_500Medium',\n    paddingBottom: 2,\n  },\n  charts: {\n\n  },\n\n});\n\n\n\nexport default SummaryScreen;"]},"metadata":{},"sourceType":"module"}