{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/davidhardy/Coding/CodeworksCourse/Senior/Solo Project/RecoveryBox/client/components/Feeling.js\";\nimport React, { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { MediumAppText } from \"../styles/text\";\nimport Divider from \"../components/Divider\";\nimport Slider from '@react-native-community/slider';\nimport colors from \"../styles/colors\";\n\nfunction Feeling() {\n  var dispatch = useDispatch();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      sliderValue = _useState2[0],\n      setSliderValue = _useState2[1];\n\n  var sliderCompletionValue = useSelector(function (state) {\n    return state.dailyInfo.feeling;\n  });\n\n  function handleSliderCompletion(arg) {\n    dispatch({\n      type: \"UPDATE_FEELING\",\n      payload: arg\n    });\n  }\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, React.createElement(MediumAppText, {\n    style: {\n      fontSize: 16\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }, \"How are you feeling today?\"), React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }, React.createElement(Slider, {\n    style: {\n      width: 200,\n      height: 40\n    },\n    minimumValue: 0,\n    step: 1,\n    maximumValue: 10,\n    onValueChange: function onValueChange(value) {\n      return setSliderValue(value);\n    },\n    onSlidingComplete: function onSlidingComplete(value) {\n      return handleSliderCompletion(value);\n    },\n    minimumTrackTintColor: \"#2F80ED\",\n    maximumTrackTintColor: \"#DBDBDB\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  })), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, sliderValue), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, sliderCompletionValue), React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }));\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\nexport default Feeling;","map":{"version":3,"sources":["/Users/davidhardy/Coding/CodeworksCourse/Senior/Solo Project/RecoveryBox/client/components/Feeling.js"],"names":["React","useState","useDispatch","useSelector","MediumAppText","Divider","Slider","colors","Feeling","dispatch","sliderValue","setSliderValue","sliderCompletionValue","state","dailyInfo","feeling","handleSliderCompletion","arg","type","payload","styles","container","fontSize","width","height","value","StyleSheet","create","alignItems","justifyContent"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;;AAEA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,SAASC,aAAT;AACA,OAAOC,OAAP;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,OAAOC,MAAP;;AAGA,SAASC,OAAT,GAAoB;AAElB,MAAMC,QAAQ,GAAGP,WAAW,EAA5B;;AAFkB,kBAGoBD,QAAQ,CAAC,KAAD,CAH5B;AAAA;AAAA,MAGXS,WAHW;AAAA,MAGEC,cAHF;;AAIlB,MAAMC,qBAAqB,GAAGT,WAAW,CAAC,UAACU,KAAD;AAAA,WAAWA,KAAK,CAACC,SAAN,CAAgBC,OAA3B;AAAA,GAAD,CAAzC;;AACA,WAASC,sBAAT,CAAiCC,GAAjC,EAAsC;AACpCR,IAAAA,QAAQ,CAAC;AACPS,MAAAA,IAAI,EAAE,gBADC;AAEPC,MAAAA,OAAO,EAAEF;AAFF,KAAD,CAAR;AAID;;AAID,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEG,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,aAAD;AAAe,IAAA,KAAK,EAAE;AAACC,MAAAA,QAAQ,EAAE;AAAX,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCADF,EAEE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,oBAAC,MAAD;AACE,IAAA,KAAK,EAAE;AAACC,MAAAA,KAAK,EAAE,GAAR;AAAaC,MAAAA,MAAM,EAAE;AAArB,KADT;AAEE,IAAA,YAAY,EAAE,CAFhB;AAGE,IAAA,IAAI,EAAE,CAHR;AAIE,IAAA,YAAY,EAAE,EAJhB;AAKE,IAAA,aAAa,EAAE,uBAAAC,KAAK;AAAA,aAAId,cAAc,CAACc,KAAD,CAAlB;AAAA,KALtB;AAME,IAAA,iBAAiB,EAAE,2BAAAA,KAAK;AAAA,aAAIT,sBAAsB,CAACS,KAAD,CAA1B;AAAA,KAN1B;AAOE,IAAA,qBAAqB,EAAC,SAPxB;AAQE,IAAA,qBAAqB,EAAC,SARxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,CAFF,EAcE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOf,WAAP,CAdF,EAeE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOE,qBAAP,CAfF,EAgBE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhBF,CADF;AAoBD;;AAED,IAAMQ,MAAM,GAAGM,UAAU,CAACC,MAAX,CAAkB;AAC/BN,EAAAA,SAAS,EAAE;AACTO,IAAAA,UAAU,EAAE,QADH;AAETC,IAAAA,cAAc,EAAE;AAFP;AADoB,CAAlB,CAAf;AASA,eAAerB,OAAf","sourcesContent":["import React, { useState } from 'react';\nimport { StyleSheet, View, Text, Image } from 'react-native';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport { MediumAppText } from '../styles/text'\nimport Divider from '../components/Divider'\nimport Slider from '@react-native-community/slider';\nimport colors from '../styles/colors'\n\n\nfunction Feeling () {\n\n  const dispatch = useDispatch();\n  const [sliderValue, setSliderValue] = useState(false)\n  const sliderCompletionValue = useSelector((state) => state.dailyInfo.feeling)\n  function handleSliderCompletion (arg) {\n    dispatch({\n      type: \"UPDATE_FEELING\",\n      payload: arg\n    })\n  }\n\n  //https://www.skptricks.com/2019/03/add-blinking-animation-on-text-in-react-native-app.html\n\n  return (\n    <View style={styles.container}>\n      <MediumAppText style={{fontSize: 16}}>How are you feeling today?</MediumAppText>\n      <View>\n      <Slider\n        style={{width: 200, height: 40}}\n        minimumValue={0}\n        step={1}\n        maximumValue={10}\n        onValueChange={value => setSliderValue(value)}\n        onSlidingComplete={value => handleSliderCompletion(value)}\n        minimumTrackTintColor=\"#2F80ED\"\n        maximumTrackTintColor=\"#DBDBDB\"\n      />\n      </View>\n      <Text>{sliderValue}</Text>\n      <Text>{sliderCompletionValue}</Text>\n      <Divider/>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n\n\n\nexport default Feeling;"]},"metadata":{},"sourceType":"module"}