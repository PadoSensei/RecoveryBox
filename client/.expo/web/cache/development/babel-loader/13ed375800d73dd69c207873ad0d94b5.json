{"ast":null,"code":"var _jsxFileName = \"/Users/davidhardy/Coding/CodeworksCourse/Senior/Solo Project/RecoveryBox/client/components/MoodVisuals.js\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { MediumAppText, BoldAppText } from \"../styles/text\";\nimport Divider from \"./Divider\";\nimport { VictoryArea, VictoryChart, VictoryAxis } from 'victory-native';\nimport _ from 'lodash';\nimport { DateTime } from 'luxon';\nimport { Defs, LinearGradient, Stop } from \"react-native-svg\";\n\nfunction MoodVisuals() {\n  var historicalData = useSelector(function (state) {\n    return state.historicalData;\n  });\n\n  var feelingData = _.map(historicalData, function (el) {\n    return el.moods;\n  });\n\n  var dateData = _.map(historicalData, function (el) {\n    return el.date;\n  });\n\n  var formattedDateData = dateData.map(function (date) {\n    return DateTime.fromMillis(date).toFormat('LLL dd');\n  });\n\n  function create(array1, array2) {\n    var list = [];\n    var count = 0;\n\n    for (var _iterator = _createForOfIteratorHelperLoose(array1), _step; !(_step = _iterator()).done;) {\n      var i = _step.value;\n      var obj = {};\n      obj.date = i;\n      obj.feeling = array2[count];\n      list.push(obj);\n      count++;\n    }\n\n    return list;\n  }\n\n  var combinedList = create(formattedDateData, feelingData);\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, \"MoodVissuals\"));\n}\n\nvar styles = StyleSheet.create({\n  container: {}\n});\nexport default MoodVisuals;","map":{"version":3,"sources":["/Users/davidhardy/Coding/CodeworksCourse/Senior/Solo Project/RecoveryBox/client/components/MoodVisuals.js"],"names":["React","useDispatch","useSelector","MediumAppText","BoldAppText","Divider","VictoryArea","VictoryChart","VictoryAxis","_","DateTime","Defs","LinearGradient","Stop","MoodVisuals","historicalData","state","feelingData","map","el","moods","dateData","date","formattedDateData","fromMillis","toFormat","create","array1","array2","list","count","i","obj","feeling","push","combinedList","styles","container","StyleSheet"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;AAEA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,SAASC,aAAT,EAAwBC,WAAxB;AACA,OAAOC,OAAP;AACA,SAASC,WAAT,EAAsBC,YAAtB,EAAoCC,WAApC,QAAuD,gBAAvD;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAAQC,IAAR,EAAcC,cAAd,EAA8BC,IAA9B,QAA0C,kBAA1C;;AAGA,SAASC,WAAT,GAAwB;AAEtB,MAAMC,cAAc,GAAGb,WAAW,CAAC,UAACc,KAAD;AAAA,WAAWA,KAAK,CAACD,cAAjB;AAAA,GAAD,CAAlC;;AACA,MAAME,WAAW,GAAGR,CAAC,CAACS,GAAF,CAAMH,cAAN,EAAsB,UAAAI,EAAE;AAAA,WAAIA,EAAE,CAACC,KAAP;AAAA,GAAxB,CAApB;;AACA,MAAMC,QAAQ,GAAGZ,CAAC,CAACS,GAAF,CAAMH,cAAN,EAAsB,UAAAI,EAAE;AAAA,WAAIA,EAAE,CAACG,IAAP;AAAA,GAAxB,CAAjB;;AACA,MAAMC,iBAAiB,GAAGF,QAAQ,CAACH,GAAT,CAAa,UAAAI,IAAI;AAAA,WAAIZ,QAAQ,CAACc,UAAT,CAAoBF,IAApB,EAA0BG,QAA1B,CAAmC,QAAnC,CAAJ;AAAA,GAAjB,CAA1B;;AAEA,WAASC,MAAT,CAAgBC,MAAhB,EAAwBC,MAAxB,EAAgC;AAC9B,QAAIC,IAAI,GAAG,EAAX;AACA,QAAIC,KAAK,GAAG,CAAZ;;AACA,yDAAcH,MAAd,wCAAsB;AAAA,UAAbI,CAAa;AACpB,UAAIC,GAAG,GAAG,EAAV;AACAA,MAAAA,GAAG,CAACV,IAAJ,GAAWS,CAAX;AACAC,MAAAA,GAAG,CAACC,OAAJ,GAAcL,MAAM,CAACE,KAAD,CAApB;AACAD,MAAAA,IAAI,CAACK,IAAL,CAAUF,GAAV;AACAF,MAAAA,KAAK;AACN;;AACD,WAAOD,IAAP;AACD;;AAED,MAAMM,YAAY,GAAGT,MAAM,CAACH,iBAAD,EAAoBN,WAApB,CAA3B;AAEA,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEmB,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,CADF;AAKD;;AAED,IAAMD,MAAM,GAAGE,UAAU,CAACZ,MAAX,CAAkB;AAC/BW,EAAAA,SAAS,EAAE;AADoB,CAAlB,CAAf;AAOA,eAAevB,WAAf","sourcesContent":["import React from 'react';\nimport { StyleSheet, View, Text, Image } from 'react-native';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport { MediumAppText, BoldAppText } from '../styles/text'\nimport Divider from './Divider'\nimport { VictoryArea, VictoryChart, VictoryAxis } from 'victory-native';\nimport _ from 'lodash';\nimport { DateTime } from 'luxon'\nimport {Defs, LinearGradient, Stop } from \"react-native-svg\";\n\n\nfunction MoodVisuals () {\n\n  const historicalData = useSelector((state) => state.historicalData);\n  const feelingData = _.map(historicalData, el => el.moods) \n  const dateData = _.map(historicalData, el => el.date)\n  const formattedDateData = dateData.map(date => DateTime.fromMillis(date).toFormat('LLL dd'))\n  \n  function create(array1, array2) {\n    let list = [];\n    let count = 0;\n    for (let i of array1) {\n      let obj = {}\n      obj.date = i\n      obj.feeling = array2[count]\n      list.push(obj)\n      count++\n    }\n    return list\n  }\n\n  const combinedList = create(formattedDateData, feelingData)\n\n  return (\n    <View style={styles.container}>\n      <Text>MoodVissuals</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n  },\n});\n\n\n\nexport default MoodVisuals;"]},"metadata":{},"sourceType":"module"}