{"ast":null,"code":"var _jsxFileName = \"/Users/davidhardy/Coding/CodeworksCourse/Senior/Solo Project/RecoveryBox/client/containers/SummaryScreen.js\";\nimport React, { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport MeetingsSummary from \"../components/MeetingsSummary\";\nimport FeelingGraph from \"../components/graphs/FeelingGraph\";\nimport MoodVisuals from \"../components/graphs/MoodVisuals\";\nimport SuggestionsVisuals from \"../components/graphs/SuggestionsVisuals\";\nimport Footer from \"../components/Footer\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Constants from 'expo-constants';\nimport { BoldAppText, MediumAppText } from \"../styles/text\";\nimport colors from \"../styles/colors\";\n\nfunction SummaryScreen() {\n  var windowHeight = Dimensions.get('window').height;\n  var statusBarHeight = Constants.statusBarHeight;\n  var fullHeight = windowHeight + statusBarHeight;\n  var dynamicStyle = {\n    height: fullHeight\n  };\n  var chartHeight = {\n    height: fullHeight / 4\n  };\n  var dispatch = useDispatch();\n  var chartTimePeriod = useSelector(function (state) {\n    return state.helper.chartTimePeriod;\n  });\n\n  function clickHandler(timePeriod) {\n    console.log('hello');\n    dispatch({\n      type: 'UPDATE_TIMEPERIOD',\n      payload: timePeriod\n    });\n  }\n\n  return React.createElement(View, {\n    style: [styles.container, dynamicStyle],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, React.createElement(ScrollView, {\n    style: styles.scrollView,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: styles.options,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }\n  }, React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return clickHandler('week');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, React.createElement(MediumAppText, {\n    style: chartTimePeriod === 'week' ? styles.optionsTextSelected : styles.optionsTextUnselected,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 15\n    }\n  }, \"WEEK\"))), React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  }, React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return clickHandler('month');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, React.createElement(MediumAppText, {\n    style: chartTimePeriod === 'month' ? styles.optionsTextSelected : styles.optionsTextUnselected,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 15\n    }\n  }, \"MONTH\"))), React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }, React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return clickHandler('month');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, React.createElement(MediumAppText, {\n    onPress: function onPress() {\n      return clickHandler('all-time');\n    },\n    style: chartTimePeriod === 'all-time' ? styles.optionsTextSelected : styles.optionsTextUnselected,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 15\n    }\n  }, \"ALL-TIME\")))), React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: styles.textWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }, React.createElement(View, {\n    style: {\n      flexDirection: 'row'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }, React.createElement(BoldAppText, {\n    style: {\n      fontSize: 15,\n      color: colors.orange\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }, \"xxx \"), React.createElement(BoldAppText, {\n    style: {\n      fontSize: 15\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, \"days in recovery\")), React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }, React.createElement(MeetingsSummary, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 15\n    }\n  }))), React.createElement(View, {\n    style: styles.feelingGraph,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }, React.createElement(FeelingGraph, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  })), React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }, React.createElement(MoodVisuals, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  })), React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  }, React.createElement(SuggestionsVisuals, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  })))), React.createElement(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }));\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: colors.platinum,\n    flex: 1,\n    paddingBottom: 65\n  },\n  scrollView: {\n    borderRadius: 5,\n    backgroundColor: 'white',\n    elevation: 1,\n    margin: 10,\n    paddingHorizontal: 10,\n    paddingVertical: 12\n  },\n  options: {\n    position: 'absolute',\n    flex: 1,\n    flexDirection: 'row',\n    alignSelf: 'flex-end',\n    marginRight: 5\n  },\n  optionsTextSelected: {\n    marginTop: -3,\n    marginRight: 7,\n    borderBottomWidth: 2,\n    borderColor: colors.blue,\n    fontFamily: 'Montserrat_700Bold',\n    color: colors.darkGrayFont,\n    paddingBottom: 2\n  },\n  optionsTextUnselected: {\n    marginTop: -3,\n    marginRight: 7,\n    opacity: 0.5,\n    fontFamily: 'Montserrat_500Medium',\n    paddingBottom: 2\n  },\n  textWrapper: {\n    marginTop: 10,\n    marginBottom: 20\n  },\n  feelingGraph: {\n    marginBottom: -20\n  }\n});\nexport default SummaryScreen;","map":{"version":3,"sources":["/Users/davidhardy/Coding/CodeworksCourse/Senior/Solo Project/RecoveryBox/client/containers/SummaryScreen.js"],"names":["React","useState","useSelector","useDispatch","MeetingsSummary","FeelingGraph","MoodVisuals","SuggestionsVisuals","Footer","Constants","BoldAppText","MediumAppText","colors","SummaryScreen","windowHeight","Dimensions","get","height","statusBarHeight","fullHeight","dynamicStyle","chartHeight","dispatch","chartTimePeriod","state","helper","clickHandler","timePeriod","console","log","type","payload","styles","container","scrollView","options","optionsTextSelected","optionsTextUnselected","textWrapper","flexDirection","fontSize","color","orange","feelingGraph","StyleSheet","create","backgroundColor","platinum","flex","paddingBottom","borderRadius","elevation","margin","paddingHorizontal","paddingVertical","position","alignSelf","marginRight","marginTop","borderBottomWidth","borderColor","blue","fontFamily","darkGrayFont","opacity","marginBottom"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { StyleSheet, View, Text, ScrollView, TouchableOpacity, TouchableHighlight } from 'react-native';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport MeetingsSummary from '../components/MeetingsSummary'\nimport FeelingGraph from '../components/graphs/FeelingGraph'\nimport MoodVisuals from '../components/graphs/MoodVisuals'\nimport SuggestionsVisuals from '../components/graphs/SuggestionsVisuals'\nimport Footer from '../components/Footer'\nimport { Dimensions } from \"react-native\";\nimport Constants from 'expo-constants';\nimport { BoldAppText, MediumAppText } from '../styles/text';\nimport colors from '../styles/colors';\n\nfunction SummaryScreen () {\n\n  const windowHeight = Dimensions.get('window').height;\n  const statusBarHeight = Constants.statusBarHeight\n  const fullHeight = windowHeight + statusBarHeight;\n\n  const dynamicStyle = {\n    height: fullHeight,\n    // paddingTop: statusBarHeight,\n  };\n\n  const chartHeight = {\n    height: fullHeight/4,\n  };\n\n  const dispatch = useDispatch();\n  const chartTimePeriod = useSelector((state) => state.helper.chartTimePeriod)\n\n  function clickHandler (timePeriod) {\n    console.log('hello')\n    dispatch({\n      type: 'UPDATE_TIMEPERIOD',\n      payload: timePeriod\n    })\n  }\n\n  //TODO run an animated view which fades in all the data and charts whenever someone changes their preference for the timeperiod\n  //TODO change the current onpress to something swipeable?\n\n  return (\n    <View style={[styles.container,  dynamicStyle]}>\n      <ScrollView style={styles.scrollView}>\n        <View style={styles.options}>\n          {/* add option to show data for a week, month or alltime */}\n          <View >\n            <TouchableOpacity onPress={()=>clickHandler('week')}>\n              <MediumAppText style={chartTimePeriod === 'week' ? styles.optionsTextSelected : styles.optionsTextUnselected}>WEEK</MediumAppText>\n            </TouchableOpacity>\n          </View>\n          <View>\n            <TouchableOpacity onPress={()=>clickHandler('month')}>\n              <MediumAppText  style={chartTimePeriod === 'month' ? styles.optionsTextSelected : styles.optionsTextUnselected}>MONTH</MediumAppText>\n            </TouchableOpacity>\n          </View>\n          <View>\n            <TouchableOpacity onPress={()=>clickHandler('month')}>\n              <MediumAppText onPress={()=>clickHandler('all-time')} style={chartTimePeriod === 'all-time' ? styles.optionsTextSelected : styles.optionsTextUnselected}>ALL-TIME</MediumAppText>\n            </TouchableOpacity>\n          </View>\n        </View>\n        <View>\n          <View style={styles.textWrapper}>\n            <View style={{flexDirection: 'row'}}>\n            <BoldAppText style={{fontSize: 15, color:colors.orange}}>xxx </BoldAppText>\n            <BoldAppText style={{fontSize: 15}}>days in recovery</BoldAppText>\n            </View>\n            <View>\n              <MeetingsSummary />\n            </View>\n          </View>\n          <View style={styles.feelingGraph}>\n            <FeelingGraph />\n          </View>\n          <View >\n            <MoodVisuals />\n          </View>\n          <View >\n            <SuggestionsVisuals/>\n          </View>\n        </View>\n      </ScrollView>\n      <Footer/>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: colors.platinum,\n    flex: 1,\n    paddingBottom: 65,\n  },\n  scrollView: {\n    borderRadius: 5,\n    backgroundColor: 'white',\n    elevation: 1,\n    margin: 10,\n    paddingHorizontal: 10,\n    paddingVertical: 12,\n  },\n  options: {\n    position: 'absolute',\n    flex: 1,\n    flexDirection: 'row',\n    alignSelf: 'flex-end',\n    marginRight: 5,\n  },\n  optionsTextSelected: {\n    marginTop: -3,\n    marginRight: 7,\n    borderBottomWidth: 2,\n    borderColor: colors.blue,\n    fontFamily: 'Montserrat_700Bold',\n    color: colors.darkGrayFont,\n    paddingBottom: 2,\n  },\n  optionsTextUnselected: {\n    marginTop: -3,\n    marginRight: 7,\n    opacity: 0.5,\n    fontFamily: 'Montserrat_500Medium',\n    paddingBottom: 2,\n  },\n  textWrapper: {\n    marginTop: 10,\n    marginBottom: 20,\n  },\n  feelingGraph: {\n    marginBottom: -20\n  },\n});\n\n\n\nexport default SummaryScreen;"]},"metadata":{},"sourceType":"module"}