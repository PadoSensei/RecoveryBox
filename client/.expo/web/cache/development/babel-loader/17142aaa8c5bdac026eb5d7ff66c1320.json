{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/davidhardy/Coding/CodeworksCourse/Senior/Solo Project/RecoveryBox/client/components/Feeling.js\";\nimport React, { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { BoldAppText, MediumAppText } from \"../styles/text\";\nimport Divider from \"../components/Divider\";\nimport Slider from '@react-native-community/slider';\nimport colors from \"../styles/colors\";\n\nfunction Feeling() {\n  var dispatch = useDispatch();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      sliderValue = _useState2[0],\n      setSliderValue = _useState2[1];\n\n  var sliderCompletionValue = useSelector(function (state) {\n    return state.dailyInfo.feeling;\n  });\n\n  function handleSliderCompletion(arg) {\n    dispatch({\n      type: \"UPDATE_FEELING\",\n      payload: arg\n    });\n  }\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }, React.createElement(BoldAppText, {\n    style: {\n      fontSize: 17\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }, \"How are you feeling?\")), React.createElement(View, {\n    style: styles.sliderWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: styles.textWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  }, React.createElement(MediumAppText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 11\n    }\n  }, \"Its been a tough day\")), React.createElement(Slider, {\n    style: {\n      width: 200,\n      height: 40\n    },\n    minimumValue: 0,\n    value: 5,\n    step: 1,\n    maximumValue: 10,\n    onValueChange: function onValueChange(value) {\n      return setSliderValue(value);\n    },\n    onSlidingComplete: function onSlidingComplete(value) {\n      return handleSliderCompletion(value);\n    },\n    minimumTrackTintColor: \"#2F80ED\",\n    maximumTrackTintColor: \"#DBDBDB\",\n    thumbTintColor: colors.orange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }), React.createElement(View, {\n    style: styles.textWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, React.createElement(MediumAppText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }\n  }, \"Super awesome\"))), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, sliderValue), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, sliderCompletionValue), React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }));\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexDirection: 'column'\n  },\n  sliderWrapper: {\n    flexDirection: 'row'\n  },\n  textWrapper: {\n    width: 50\n  }\n});\nexport default Feeling;","map":{"version":3,"sources":["/Users/davidhardy/Coding/CodeworksCourse/Senior/Solo Project/RecoveryBox/client/components/Feeling.js"],"names":["React","useState","useDispatch","useSelector","BoldAppText","MediumAppText","Divider","Slider","colors","Feeling","dispatch","sliderValue","setSliderValue","sliderCompletionValue","state","dailyInfo","feeling","handleSliderCompletion","arg","type","payload","styles","container","fontSize","sliderWrapper","textWrapper","width","height","value","orange","StyleSheet","create","flex","alignItems","justifyContent","flexDirection"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { StyleSheet, View, Text, Image } from 'react-native';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport { BoldAppText, MediumAppText } from '../styles/text'\nimport Divider from '../components/Divider'\nimport Slider from '@react-native-community/slider';\nimport colors from '../styles/colors'\n\n\nfunction Feeling () {\n\n  const dispatch = useDispatch();\n  const [sliderValue, setSliderValue] = useState(false)\n  const sliderCompletionValue = useSelector((state) => state.dailyInfo.feeling)\n  function handleSliderCompletion (arg) {\n    dispatch({\n      type: \"UPDATE_FEELING\",\n      payload: arg\n    })\n  }\n\n  //https://www.skptricks.com/2019/03/add-blinking-animation-on-text-in-react-native-app.html\n\n  return (\n    <View style={styles.container}>\n      <View>\n        <BoldAppText style={{fontSize: 17}}>How are you feeling?</BoldAppText>\n      </View>\n      <View style={styles.sliderWrapper}>\n        <View style={styles.textWrapper}>\n          <MediumAppText>Its been a tough day</MediumAppText>\n        </View>\n        <Slider\n          style={{width: 200, height: 40}}\n          minimumValue={0}\n          value={5}\n          step={1}\n          maximumValue={10}\n          onValueChange={value => setSliderValue(value)}\n          onSlidingComplete={value => handleSliderCompletion(value)}\n          minimumTrackTintColor=\"#2F80ED\"\n          maximumTrackTintColor=\"#DBDBDB\"\n          thumbTintColor={colors.orange}\n        />\n        <View style={styles.textWrapper}>\n          <MediumAppText>Super awesome</MediumAppText>\n        </View>\n      </View>\n      <Text>{sliderValue}</Text>\n      <Text>{sliderCompletionValue}</Text>\n      <Divider/>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexDirection: 'column',\n  },\n  sliderWrapper: {\n    flexDirection: 'row'\n\n  },\n  textWrapper: {\n    width: 50\n  },\n});\n\n\n\nexport default Feeling;"]},"metadata":{},"sourceType":"module"}