{"ast":null,"code":"var _jsxFileName = \"/Users/davidhardy/Coding/CodeworksCourse/Senior/Solo Project/RecoveryBox/client/components/graphs/FeelingGraph.js\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { useSelector } from \"react-redux\";\nimport { MediumAppText, BoldAppText } from \"../../styles/text\";\nimport Divider from \"../Divider\";\nimport { VictoryArea, VictoryGroup, VictoryChart, VictoryAxis } from \"./Victory\";\nimport _ from 'lodash';\nimport { DateTime } from 'luxon';\nimport { Defs, LinearGradient, Stop, Svg } from \"react-native-svg\";\nimport colors from \"../../styles/colors\";\n\nfunction FeelingGraph() {\n  var chartTimePeriod = useSelector(function (state) {\n    return state.helper.chartTimePeriod;\n  });\n  var historicalData = useSelector(function (state) {\n    return state.historicalData;\n  });\n\n  var feelingData = _.map(historicalData, function (el) {\n    return el.feeling;\n  });\n\n  var dateData = _.map(historicalData, function (el) {\n    return el.date;\n  });\n\n  var formattedDateData = dateData.map(function (date) {\n    return DateTime.fromMillis(date).toFormat('LLL dd');\n  });\n\n  function create(array1, array2) {\n    var list = [];\n    var count = 0;\n\n    for (var _iterator = _createForOfIteratorHelperLoose(array1), _step; !(_step = _iterator()).done;) {\n      var i = _step.value;\n      var obj = {};\n      obj.date = i;\n      obj.feeling = array2[count];\n      list.push(obj);\n      count++;\n    }\n\n    return list;\n  }\n\n  var combinedList = create(formattedDateData, feelingData);\n  console.log(combinedList);\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, React.createElement(BoldAppText, {\n    style: {\n      marginBottom: -20,\n      fontSize: 14\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, \"My mood tracker\"), React.createElement(VictoryGroup, {\n    width: 370,\n    height: 225,\n    style: {\n      parent: {\n        overflow: visible\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, React.createElement(VictoryArea, {\n    data: combinedList,\n    x: \"date\",\n    y: \"feeling\",\n    style: {\n      data: {\n        fill: 'url(#gradient1)'\n      },\n      parent: {}\n    },\n    interpolation: \"natural\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }), React.createElement(VictoryAxis, {\n    tickCount: 4,\n    tickFormat: function tickFormat(x) {\n      return x;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }), React.createElement(Defs, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }, React.createElement(LinearGradient, {\n    id: \"gradient1\",\n    x1: \"10%\",\n    y1: \"25%\",\n    x2: \"50%\",\n    y2: \"0%\",\n    x3: \"100%\",\n    y3: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, React.createElement(Stop, {\n    offset: \"0%\",\n    stopColor: colors.cosmicLatte,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 15\n    }\n  }), React.createElement(Stop, {\n    offset: \"100%\",\n    stopColor: colors.green,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 15\n    }\n  })))));\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\nexport default FeelingGraph;","map":{"version":3,"sources":["/Users/davidhardy/Coding/CodeworksCourse/Senior/Solo Project/RecoveryBox/client/components/graphs/FeelingGraph.js"],"names":["React","useSelector","MediumAppText","BoldAppText","Divider","VictoryArea","VictoryGroup","VictoryChart","VictoryAxis","_","DateTime","Defs","LinearGradient","Stop","Svg","colors","FeelingGraph","chartTimePeriod","state","helper","historicalData","feelingData","map","el","feeling","dateData","date","formattedDateData","fromMillis","toFormat","create","array1","array2","list","count","i","obj","push","combinedList","console","log","styles","container","marginBottom","fontSize","parent","overflow","visible","data","fill","x","cosmicLatte","green","StyleSheet","flex","backgroundColor","alignItems","justifyContent"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;AAEA,SAASC,WAAT,QAA2B,aAA3B;AACA,SAASC,aAAT,EAAwBC,WAAxB;AACA,OAAOC,OAAP;AACA,SAASC,WAAT,EAAsBC,YAAtB,EAAoCC,YAApC,EAAkDC,WAAlD;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAAQC,IAAR,EAAcC,cAAd,EAA8BC,IAA9B,EAAoCC,GAApC,QAA+C,kBAA/C;AACA,OAAOC,MAAP;;AAIA,SAASC,YAAT,GAAyB;AAEvB,MAAMC,eAAe,GAAGhB,WAAW,CAAC,UAACiB,KAAD;AAAA,WAAWA,KAAK,CAACC,MAAN,CAAaF,eAAxB;AAAA,GAAD,CAAnC;AACA,MAAMG,cAAc,GAAGnB,WAAW,CAAC,UAACiB,KAAD;AAAA,WAAWA,KAAK,CAACE,cAAjB;AAAA,GAAD,CAAlC;;AACA,MAAMC,WAAW,GAAGZ,CAAC,CAACa,GAAF,CAAMF,cAAN,EAAsB,UAAAG,EAAE;AAAA,WAAIA,EAAE,CAACC,OAAP;AAAA,GAAxB,CAApB;;AACA,MAAMC,QAAQ,GAAGhB,CAAC,CAACa,GAAF,CAAMF,cAAN,EAAsB,UAAAG,EAAE;AAAA,WAAIA,EAAE,CAACG,IAAP;AAAA,GAAxB,CAAjB;;AACA,MAAMC,iBAAiB,GAAGF,QAAQ,CAACH,GAAT,CAAa,UAAAI,IAAI;AAAA,WAAIhB,QAAQ,CAACkB,UAAT,CAAoBF,IAApB,EAA0BG,QAA1B,CAAmC,QAAnC,CAAJ;AAAA,GAAjB,CAA1B;;AAEA,WAASC,MAAT,CAAgBC,MAAhB,EAAwBC,MAAxB,EAAgC;AAC9B,QAAIC,IAAI,GAAG,EAAX;AACA,QAAIC,KAAK,GAAG,CAAZ;;AACA,yDAAcH,MAAd,wCAAsB;AAAA,UAAbI,CAAa;AACpB,UAAIC,GAAG,GAAG,EAAV;AACAA,MAAAA,GAAG,CAACV,IAAJ,GAAWS,CAAX;AACAC,MAAAA,GAAG,CAACZ,OAAJ,GAAcQ,MAAM,CAACE,KAAD,CAApB;AACAD,MAAAA,IAAI,CAACI,IAAL,CAAUD,GAAV;AACAF,MAAAA,KAAK;AACN;;AACD,WAAOD,IAAP;AACD;;AAED,MAAMK,YAAY,GAAGR,MAAM,CAACH,iBAAD,EAAoBN,WAApB,CAA3B;AACAkB,EAAAA,OAAO,CAACC,GAAR,CAAYF,YAAZ;AACA,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEG,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,WAAD;AAAa,IAAA,KAAK,EAAE;AAACC,MAAAA,YAAY,EAAC,CAAC,EAAf;AAAmBC,MAAAA,QAAQ,EAAC;AAA5B,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,EAEE,oBAAC,YAAD;AAAc,IAAA,KAAK,EAAE,GAArB;AAA0B,IAAA,MAAM,EAAE,GAAlC;AAAuC,IAAA,KAAK,EAAG;AAC7CC,MAAAA,MAAM,EAAE;AACNC,QAAAA,QAAQ,EAAEC;AADJ;AADqC,KAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKE,oBAAC,WAAD;AACA,IAAA,IAAI,EAAET,YADN;AAEA,IAAA,CAAC,EAAC,MAFF;AAGA,IAAA,CAAC,EAAC,SAHF;AAIA,IAAA,KAAK,EAAE;AACLU,MAAAA,IAAI,EAAE;AAAEC,QAAAA,IAAI,EAAE;AAAR,OADD;AAELJ,MAAAA,MAAM,EAAE;AAFH,KAJP;AAQA,IAAA,aAAa,EAAC,SARd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,EAeE,oBAAC,WAAD;AACE,IAAA,SAAS,EAAE,CADb;AAEE,IAAA,UAAU,EAAE,oBAACK,CAAD;AAAA,aAAMA,CAAN;AAAA,KAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfF,EAoBI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,cAAD;AAAgB,IAAA,EAAE,EAAC,WAAnB;AACE,IAAA,EAAE,EAAC,KADL;AAEE,IAAA,EAAE,EAAC,KAFL;AAGE,IAAA,EAAE,EAAC,KAHL;AAIE,IAAA,EAAE,EAAC,IAJL;AAKE,IAAA,EAAE,EAAC,MALL;AAME,IAAA,EAAE,EAAC,MANL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQE,oBAAC,IAAD;AAAM,IAAA,MAAM,EAAC,IAAb;AAAkB,IAAA,SAAS,EAAGnC,MAAM,CAACoC,WAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,EASE,oBAAC,IAAD;AAAM,IAAA,MAAM,EAAC,MAAb;AAAoB,IAAA,SAAS,EAAEpC,MAAM,CAACqC,KAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,CADF,CApBJ,CAFF,CADF;AAyCD;;AAED,IAAMX,MAAM,GAAGY,UAAU,CAACvB,MAAX,CAAkB;AAC/BY,EAAAA,SAAS,EAAE;AACTY,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,eAAe,EAAE,MAFR;AAGTC,IAAAA,UAAU,EAAE,QAHH;AAITC,IAAAA,cAAc,EAAE;AAJP;AADoB,CAAlB,CAAf;AAUA,eAAezC,YAAf","sourcesContent":["import React from 'react';\nimport { StyleSheet, View, Text, Image } from 'react-native';\nimport { useSelector} from \"react-redux\";\nimport { MediumAppText, BoldAppText } from '../../styles/text'\nimport Divider from '../Divider'\nimport { VictoryArea, VictoryGroup, VictoryChart, VictoryAxis } from './Victory';\nimport _ from 'lodash';\nimport { DateTime } from 'luxon'\nimport {Defs, LinearGradient, Stop, Svg } from \"react-native-svg\";\nimport colors from '../../styles/colors'\n\n\n\nfunction FeelingGraph () {\n\n  const chartTimePeriod = useSelector((state) => state.helper.chartTimePeriod)\n  const historicalData = useSelector((state) => state.historicalData);\n  const feelingData = _.map(historicalData, el => el.feeling) \n  const dateData = _.map(historicalData, el => el.date)\n  const formattedDateData = dateData.map(date => DateTime.fromMillis(date).toFormat('LLL dd'))\n  \n  function create(array1, array2) {\n    let list = [];\n    let count = 0;\n    for (let i of array1) {\n      let obj = {}\n      obj.date = i\n      obj.feeling = array2[count]\n      list.push(obj)\n      count++\n    }\n    return list\n  }\n\n  const combinedList = create(formattedDateData, feelingData)\n  console.log(combinedList)\n  return (\n    <View style={styles.container}>\n      <BoldAppText style={{marginBottom:-20, fontSize:14}}>My mood tracker</BoldAppText>\n      <VictoryGroup width={370} height={225} style= {{\n        parent: {\n          overflow: visible\n        }\n      }}>\n        <VictoryArea \n        data={combinedList} \n        x=\"date\" \n        y=\"feeling\"\n        style={{ \n          data: { fill: 'url(#gradient1)' },\n          parent: {}\n          }}\n        interpolation=\"natural\"\n        />\n        <VictoryAxis\n          tickCount={4}\n          tickFormat={(x)=> x}\n        />\n \n          <Defs>\n            <LinearGradient id=\"gradient1\"\n              x1=\"10%\" \n              y1=\"25%\" \n              x2=\"50%\"\n              y2=\"0%\"\n              x3=\"100%\" \n              y3=\"100%\"\n            >\n              <Stop offset=\"0%\" stopColor= {colors.cosmicLatte}/>\n              <Stop offset=\"100%\" stopColor={colors.green}/>\n            </LinearGradient>\n          </Defs>\n\n\n      </VictoryGroup>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n\n\nexport default FeelingGraph;"]},"metadata":{},"sourceType":"module"}