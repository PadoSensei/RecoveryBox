{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/davidhardy/Coding/CodeworksCourse/Senior/Solo Project/RecoveryBox/client/components/Login.js\";\nimport React, { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { BoldAppText, MediumAppText } from \"../styles/text\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport ApiService from \"../ApiService\";\n\nfunction LoginScreen(_ref) {\n  var navigation = _ref.navigation;\n  var dispatch = useDispatch();\n\n  var _useState = useState(useSelector(function (state) {\n    return state.user.username;\n  })),\n      _useState2 = _slicedToArray(_useState, 2),\n      usernameInput = _useState2[0],\n      onChangeUsername = _useState2[1];\n\n  var _useState3 = useState(useSelector(function (state) {\n    return state.user.password;\n  })),\n      _useState4 = _slicedToArray(_useState3, 2),\n      passwordInput = _useState4[0],\n      onChangePassword = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      warning = _useState6[0],\n      setWarning = _useState6[1];\n\n  var submitHandler = function submitHandler(arg) {\n    if (usernameInput && passwordInput) {\n      dispatch({\n        type: 'UPDATE_USERNAME',\n        payload: arg\n      });\n      navigation.navigate('Home');\n    } else {\n      setWarning(true);\n    }\n  };\n\n  function receiveInfoandData(username) {\n    ApiService.postDailyData({\n      date: dailyData.date,\n      meetings: dailyData.meetings,\n      feeling: dailyData.feeling,\n      moods: JSON.stringify(dailyData.moods),\n      suggestions: JSON.stringify(dailyData.suggestions),\n      UserId: userId\n    }).then(function (data) {\n      var objToDispatch = {};\n      console.log('datafromserver', data);\n    });\n  }\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, React.createElement(BoldAppText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, \"Welcome to RecoveryBox\"), React.createElement(MediumAppText, {\n    style: {\n      fontSize: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, \"Please enter your details to log-in\"), React.createElement(TextInput, {\n    placeholder: \"Enter a username\",\n    value: usernameInput ? usernameInput : '',\n    onChangeText: function onChangeText(text) {\n      return onChangeUsername(text);\n    },\n    style: styles.input,\n    textContentType: 'username',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }), React.createElement(TextInput, {\n    placeholder: \"Enter a password\",\n    value: passwordInput ? passwordInput : '',\n    secureTextEntry: true,\n    onChangeText: function onChangeText(text) {\n      return onChangePassword(text);\n    },\n    style: styles.input,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }), React.createElement(TouchableOpacity, {\n    style: styles.button,\n    onPress: function onPress() {\n      return submitHandler(usernameInput);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, React.createElement(MediumAppText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, \"Please submit me\")), React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, warning ? React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 21\n    }\n  }, \"Please submit both a username and password\") : null));\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#fff'\n  },\n  input: {\n    marginTop: 20,\n    marginBottom: 20,\n    textAlign: 'center'\n  },\n  button: {\n    width: '10%',\n    height: 50,\n    borderRadius: 5,\n    marginHorizontal: 20,\n    backgroundColor: '#ADF1FF',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\nexport default LoginScreen;","map":{"version":3,"sources":["/Users/davidhardy/Coding/CodeworksCourse/Senior/Solo Project/RecoveryBox/client/components/Login.js"],"names":["React","useState","BoldAppText","MediumAppText","useDispatch","useSelector","ApiService","LoginScreen","navigation","dispatch","state","user","username","usernameInput","onChangeUsername","password","passwordInput","onChangePassword","warning","setWarning","submitHandler","arg","type","payload","navigate","receiveInfoandData","postDailyData","date","dailyData","meetings","feeling","moods","JSON","stringify","suggestions","UserId","userId","then","data","objToDispatch","console","log","styles","container","fontSize","text","input","button","StyleSheet","create","flex","alignItems","justifyContent","backgroundColor","marginTop","marginBottom","textAlign","width","height","borderRadius","marginHorizontal"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { StyleSheet, TextInput, View, TouchableOpacity, Text, Image } from 'react-native';\nimport { BoldAppText, MediumAppText } from '../styles/text'\nimport {useDispatch, useSelector } from \"react-redux\";\nimport ApiService from '../ApiService'\n\nfunction LoginScreen ({ navigation }) {\n\n  // TODO: refactor to not have to useState for passwordInput and usernameInput?\n  const dispatch = useDispatch();\n\n  const [usernameInput, onChangeUsername] = useState(useSelector((state) => state.user.username));\n  const [passwordInput, onChangePassword] = useState(useSelector((state) => state.user.password));\n  const [warning, setWarning] = useState(false); \n\n  const submitHandler = (arg) => {\n    if (usernameInput && passwordInput) {\n      dispatch({\n        type: 'UPDATE_USERNAME',\n        payload: arg\n      })\n      navigation.navigate('Home');\n    } else {\n      setWarning(true);\n    }\n  }\n\n  function receiveInfoandData (username) {\n    ApiService.postDailyData( {\n      date: dailyData.date,\n      meetings: dailyData.meetings,\n      feeling: dailyData.feeling,\n      moods: JSON.stringify(dailyData.moods),\n      suggestions: JSON.stringify(dailyData.suggestions),\n      UserId: userId,\n    })\n    .then(data => {\n      let objToDispatch = {}\n      \n      \n      console.log('datafromserver',data)\n      // dispatch({\n      //   type: \"UPDATE_HISTORICALDATA_WITH_DAILYINFO\",\n      //   payload: data\n      // })\n    })\n  }\n\n  return (\n    <View style={styles.container}>\n      <BoldAppText>Welcome to RecoveryBox</BoldAppText>\n      <MediumAppText style={{fontSize : 20}}>Please enter your details to log-in</MediumAppText>\n      <TextInput\n        placeholder='Enter a username'\n        value= {usernameInput ? usernameInput : ''}\n        onChangeText={text => onChangeUsername(text)}\n        style={styles.input}\n        textContentType={'username'}\n      />\n      <TextInput\n        placeholder='Enter a password'\n        value= {passwordInput ? passwordInput : ''}\n        secureTextEntry={true}\n        onChangeText={text => onChangePassword(text)}\n        style={styles.input}\n      />\n      <TouchableOpacity style={styles.button} onPress={() => submitHandler(usernameInput)}>\n        <MediumAppText>Please submit me</MediumAppText>\n      </TouchableOpacity>\n      <View>\n        { \n          warning ? <Text>Please submit both a username and password</Text> : null\n        }\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#fff',\n  },\n  input: {\n    marginTop: 20,\n    marginBottom: 20,\n    textAlign: 'center',\n  },\n  button: {\n    width: '10%',\n    height: 50,\n    borderRadius: 5,\n    marginHorizontal: 20,\n    backgroundColor: '#ADF1FF',\n    alignItems: 'center',\n    justifyContent: 'center',\n  }\n});\n\n\n\nexport default LoginScreen;"]},"metadata":{},"sourceType":"module"}