{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nvar _jsxFileName = \"/Users/davidhardy/Coding/CodeworksCourse/Senior/Solo Project/RecoveryBox/client/components/Calendar.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { Calendar } from 'react-native-calendars';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useNavigation } from '@react-navigation/native';\nimport colors from \"../styles/colors\";\nimport { DateTime } from 'luxon';\n\nfunction CalendarDH() {\n  var _this = this;\n\n  var dispatch = useDispatch();\n  var now = useSelector(function (state) {\n    return state.helper.now;\n  });\n  var historicalData = useSelector(function (state) {\n    return state.historicalData;\n  });\n\n  var dateData = _.map(historicalData, function (el) {\n    return el.date;\n  });\n\n  var formattedDateData = dateData.map(function (date) {\n    return DateTime.fromMillis(date).toFormat('yyyy-LL-dd');\n  });\n  console.log(formattedDateData[0]);\n  var dates = [].concat(_toConsumableArray(formattedDateData), ['2020-09-27']);\n  var markedDatesObj = {};\n  formattedDateData.forEach(function (day) {\n    markedDatesObj = _objectSpread(_objectSpread({}, markedDatesObj), {}, _defineProperty({}, day, {\n      dotColor: colors.green,\n      marked: true\n    }));\n  });\n  var navigation = useNavigation();\n\n  var pressHandler = function pressHandler(arg) {\n    dispatch({\n      type: 'SELECT_DATE',\n      payload: arg\n    });\n    navigation.navigate('History');\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, React.createElement(Calendar, {\n    current: now,\n    minDate: '2019-05-10',\n    maxDate: now,\n    onDayPress: function onDayPress(day) {\n      pressHandler(day.timestamp);\n    },\n    monthFormat: 'MMMM yyyy',\n    hideArrows: false,\n    renderArrow: function renderArrow(direction) {\n      if (direction === 'right') return React.createElement(Image, {\n        style: styles.image,\n        source: require(\"../assets/forward.png\"),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 43\n        }\n      });\n      if (direction === 'left') return React.createElement(Image, {\n        style: styles.image,\n        source: require(\"../assets/back.png\"),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 42\n        }\n      });\n    },\n    hideExtraDays: false,\n    disableMonthChange: true,\n    firstDay: 1,\n    hideDayNames: false,\n    showWeekNumbers: false,\n    onPressArrowLeft: function onPressArrowLeft(subtractMonth) {\n      return subtractMonth();\n    },\n    onPressArrowRight: function onPressArrowRight(addMonth) {\n      return addMonth();\n    },\n    disableArrowLeft: false,\n    disableArrowRight: false,\n    disableAllTouchEventsForDisabledDays: true,\n    enableSwipeMonths: true,\n    theme: {\n      textDayFontFamily: 'Montserrat_500Medium',\n      textMonthFontFamily: 'Montserrat_700Bold',\n      textDayHeaderFontFamily: 'Montserrat_700Bold',\n      textDayFontSize: 14,\n      textMonthFontSize: 18\n    },\n    markedDates: markedDatesObj,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }));\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    marginTop: 70,\n    alignSelf: 'center'\n  },\n  image: {\n    height: 20,\n    width: 20\n  }\n});\nexport default CalendarDH;","map":{"version":3,"sources":["/Users/davidhardy/Coding/CodeworksCourse/Senior/Solo Project/RecoveryBox/client/components/Calendar.js"],"names":["React","Calendar","useSelector","useDispatch","useNavigation","colors","DateTime","CalendarDH","dispatch","now","state","helper","historicalData","dateData","_","map","el","date","formattedDateData","fromMillis","toFormat","console","log","dates","markedDatesObj","forEach","day","dotColor","green","marked","navigation","pressHandler","arg","type","payload","navigate","styles","container","timestamp","direction","image","require","subtractMonth","addMonth","textDayFontFamily","textMonthFontFamily","textDayHeaderFontFamily","textDayFontSize","textMonthFontSize","StyleSheet","create","marginTop","alignSelf","height","width"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { StyleSheet, Text, View, Image } from 'react-native';\nimport {Calendar } from 'react-native-calendars'\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useNavigation } from '@react-navigation/native';\nimport colors from '../styles/colors';\nimport { DateTime } from 'luxon'\n\nfunction CalendarDH() {\n\n  const dispatch = useDispatch();\n  const now = useSelector((state) => state.helper.now);\n  const historicalData = useSelector((state) => state.historicalData);\n  const dateData = _.map(historicalData, el => el.date)\n  const formattedDateData = dateData.map(date => DateTime.fromMillis(date).toFormat('yyyy-LL-dd'))\n  console.log(formattedDateData[0])\n\n  const dates = [...formattedDateData, '2020-09-27']\n  let markedDatesObj = {};\n   \n  formattedDateData.forEach((day) => {\n    markedDatesObj = {\n      ...markedDatesObj, [day]:{\n        dotColor: colors.green,\n        marked: true\n      }\n    }\n  });\n\n  const navigation = useNavigation();\n\n  const pressHandler = (arg) => {\n    dispatch({\n      type: 'SELECT_DATE',\n      payload: arg\n    });\n    navigation.navigate('History');\n  }\n\n  return (\n    <View style={styles.container}>\n      <Calendar\n        current={now}\n        minDate={'2019-05-10'}\n        maxDate={now}\n        // Handler which gets executed on day press. Default = undefined\n        onDayPress={(day) => {pressHandler(day.timestamp)}}\n        monthFormat={'MMMM yyyy'}\n          hideArrows={false}\n          // Replace default arrows with custom ones (direction can be 'left' or 'right')\n        renderArrow={(direction) => {\n          if (direction==='right') return <Image style={styles.image} source={require('../assets/forward.png')}/>\n          if (direction==='left') return <Image style={styles.image} source={require('../assets/back.png')}/>\n          }}\n        hideExtraDays={false}\n        disableMonthChange={true}\n        firstDay={1}\n        hideDayNames={false}\n        showWeekNumbers={false}\n        onPressArrowLeft={subtractMonth => subtractMonth()}\n        onPressArrowRight={addMonth => addMonth()}\n        disableArrowLeft={false}\n        disableArrowRight={false}\n        disableAllTouchEventsForDisabledDays={true}\n        enableSwipeMonths={true}\n        theme={{\n          textDayFontFamily: 'Montserrat_500Medium',\n          textMonthFontFamily: 'Montserrat_700Bold',\n          textDayHeaderFontFamily: 'Montserrat_700Bold',\n          textDayFontSize: 14,\n          textMonthFontSize: 18,\n        }}\n        markedDates={markedDatesObj}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginTop: 70,\n    alignSelf: 'center',\n  },\n  image: {\n    height: 20,\n    width:20,\n  },\n});\n\nexport default CalendarDH;"]},"metadata":{},"sourceType":"module"}